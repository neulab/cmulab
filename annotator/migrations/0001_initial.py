# Generated by Django 2.1.7 on 2019-08-05 19:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(blank=True, help_text='The name of the field within the segment', max_length=100, null=True)),
                ('status', models.CharField(blank=True, choices=[('correct', 'correct'), ('incorrect', 'incorrect'), ('generated', 'generated'), ('unknown', 'unknown')], default='unknown', help_text='describes the status of the annotation e.g. correct/incorrect, or generated by a backend model (but not checked), or unknown', max_length=20, null=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Corpus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', help_text='The corpus (collection of segments)', max_length=200)),
                ('owner', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='corpus', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Mlmodel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', help_text='generic name of the model', max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modelTrainingSpec', models.TextField(help_text='TBD', max_length=10000)),
                ('status', models.CharField(choices=[('training', 'training'), ('ready', 'ready'), ('unavailable', 'unavailable')], default='unavailable', max_length=20)),
                ('tags', models.CharField(choices=[('vad', 'vad'), ('transcription', 'transcription'), ('translation', 'translation'), ('morphology', 'morphology'), ('other', 'other')], default='other', help_text='a tag for the model type, in order to be filtered by', max_length=20)),
            ],
            options={
                'ordering': ('created', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Segment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='the name of this segment', max_length=100, null=True)),
                ('corpus', models.ForeignKey(blank=True, help_text='The corpus that this segment corresponds to. (foreign key)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='segment', to='annotator.Corpus')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='AudioAnnotation',
            fields=[
                ('annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='annotator.Annotation')),
                ('audio', models.FileField(help_text='An audio file for the segment', upload_to='audios/')),
                ('audio_file_format', models.CharField(choices=[('wav', 'wav'), ('mp3', 'mp3')], help_text='An indicator of the audio file format', max_length=10)),
            ],
            bases=('annotator.annotation',),
        ),
        migrations.CreateModel(
            name='SpanTextAnnotation',
            fields=[
                ('annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='annotator.Annotation')),
                ('start', models.FloatField(help_text='Start of the span with respect to the source field (e.g in seconds or indices)')),
                ('end', models.FloatField(help_text='End of the span with respect to the source field (e.g in seconds or indices)')),
                ('text', models.TextField(help_text='annotation of the span', max_length=100)),
            ],
            bases=('annotator.annotation',),
        ),
        migrations.CreateModel(
            name='TextAnnotation',
            fields=[
                ('annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='annotator.Annotation')),
                ('text', models.TextField(help_text='A single textual string describing the whole segment', max_length=100)),
            ],
            bases=('annotator.annotation',),
        ),
        migrations.AddField(
            model_name='annotation',
            name='segment',
            field=models.ForeignKey(blank=True, help_text='The segment that this annotation corresponds to. (foreign key)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='annotation', to='annotator.Segment'),
        ),
    ]
